@page "/authentication/login"
@layout LoginLayout

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Adres email" HelperText="Max. 8 characters"
                                  @bind-Value="User.Email" For="@(() => User.Email)"/>
                    <MudTextField Label="Hasło" Class="mt-3" InputType="InputType.Password"
                                  @bind-Value="User.Password" For="@(() => User.Password)"/>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="_processing" Variant="Variant.Filled" Color="Color.Primary"
                               Class="ml-auto">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Logowanie</MudText>
                        }
                        else
                        {
                            <MudText>Zaloguj</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
            @if (!success)
            {
                <MudAlert Severity="Severity.Error" Class="mt-8 mud-width-full" Style="max-width:500px;">Niepoprawne dane logowania</MudAlert>
            }

        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Logowanie tylko dla zarejestrowanych użytkowników z emailem w domenie bormech.pl
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    readonly Login User = new();
    bool success = true;
    private bool _processing = false;
    
    public async Task OnValidSubmit()
    {
        Console.WriteLine("Login");
        _processing = true;
        var result = await accountService.SingInAsync(User);
        if (result.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", true);
        }
        else
        {
            _processing = false;
            success = result.Flag;
            
        }

        StateHasChanged();
    }

}