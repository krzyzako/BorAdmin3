@inject UserInfoState User
<MudForm Model="model" >
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Change Password</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Nowe hasło" Variant="Variant.Outlined" InputType="InputType.Password"  @bind-Value="model.NewPassword" For="@(() => model.NewPassword!)"  />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="string" Label="Powtórz nowe hasło" Variant="Variant.Outlined"  InputType="InputType.Password" @bind-Value="model.ConfirmNewPassword" For="@(() => model.ConfirmNewPassword!)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" Label="Obecne hasło" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="model.Password"  For="@(() => model.Password!)"/>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions Class="pb-4 pl-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="saveChangTask">Zapisz zmiany</MudButton>
        </MudCardActions>
    </MudCard>
</MudForm>
@model.NewPassword
@code {

    ChangePassword model = new ChangePassword();
    AuthenticationState? _user;
    UserInfo userInfo;
    protected override async Task OnInitializedAsync()
    {
        // var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        // _user = await customAuthStateProvider.GetAuthenticationStateAsync();
        // var claims = _user.User.Claims.ToString();
       userInfo = User.GetAll();
       Console.WriteLine(Serializations.SerializeObj(userInfo));

    }

    private async Task saveChangTask()
    {
        
        var result = await accountService.ChangePasswordAsync(model);
    } 


}