@page "/"
@using Bormech.Plc
@using Microsoft.AspNetCore.SignalR.Client
@using Bormech.Client.Pages.Componets
@using Bormech.Client.Pages.Helpers

@inject SignalRManagerService SignalRManagerService
@inject HubManager HubManager
@implements IDisposable

<PageTitle>Panel główny - Bormech</PageTitle>

<TemplateHeader Title="Panel główny" Img="log.png"/>

<MudGrid Justify="Justify.Center" Class="pt-5">
    <MudItem xs="12" sm="12" md="6" lg="4">
        <TemperatureShow Temperature="@OutFromPlcSettings.Wanna1Temperature" Title="Wanna 1"/>
    </MudItem>
    <MudItem xs="12" sm="12" md="6" lg="4">
        <TemperatureShow Temperature="@OutFromPlcSettings.Wanna2Temperature" Title="Wanna 2"/>
    </MudItem>
    <WeeklySchedule/>
</MudGrid>


@* <Thermostat CurrentTemperature="@OutFromPlcSettings.Wanna1Temperature" TargetTemperature="OutFromPlcSettings.Status.Operation.Wanna1.TempSet" /> *@
@code{


    private static string _nameHub = "Plc";
    private string? UserName { get; set; }
    private string Name => GetType().Name;
    private OutGoPlc OutFromPlcSettings { get; set; } = new();
    private PlcSchedule? PlcSchedule { get; set; } = null;
    private List<string> _messages = new();
    private List<Hub> _hubs;

    protected override async Task OnInitializedAsync()
    {
        _hubs = await HubManager.InitializeHubs(GetType().Name);
        HubManager.On<OutGoPlc>(_nameHub, "PlcScheduleChanged", message =>
        {
            OutFromPlcSettings = message;
            InvokeAsync(StateHasChanged);
        });
        await WaitForConnectionAsync();
        await Task.Delay(2000);
        if (PlcSchedule == null)
        {
            // PlcSchedule = await SignalRManagerService.InvokeAsync<PlcSchedule>(_nameHub, "SendObjectToHub",  "ooo");
        }
        // await InvokeAsync(StateHasChanged);


    }
    
    private bool Test => OutFromPlcSettings.Wanna1Temperature is not 0;
  


    private async Task WaitForConnectionAsync()
    {

        while (SignalRManagerService.GetHubConnectionState(_nameHub)  != HubConnectionState.Connected)
        {
            await Task.Delay(100); // Krótkie opóźnienie do czasu nawiązania połączenia
            Console.WriteLine("czekam");
        }
    }

    public async Task OnClick()
    {
        PlcSchedule = await SignalRManagerService.InvokeAsync<PlcSchedule>(_nameHub, "SendObjectToHub", "oo");
        await InvokeAsync(StateHasChanged);
    }
    public async void Dispose()
    {
        await SignalRManagerService.StopHubAsync(_nameHub);
    }
    





}
